import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.List;

@Service
public class DynamicQueryService {

    private final JdbcTemplate jdbcTemplate;

    @Autowired
    public DynamicQueryService(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Transactional(readOnly = true)
    public List<String> executeDynamicQuery(String tableName, String columnName, LocalDate date) {
        // Use TRUNC to remove the time component of the date in Oracle
        String sql = String.format("SELECT %s FROM %s WHERE TRUNC(eff_dt) <= ? AND is_valid = 'A'", columnName, tableName);

        // Convert LocalDate to java.sql.Date
        Date sqlDate = Date.valueOf(date);

        // Define a RowMapper to convert the retrieved value to String
        RowMapper<String> rowMapper = new RowMapper<String>() {
            @Override
            public String mapRow(ResultSet rs, int rowNum) throws SQLException {
                return rs.getString(1); // Assuming the column value can be directly converted to String
            }
        };

        // Execute the query using the new method signature
        return jdbcTemplate.query(sql, rowMapper, sqlDate);
    }
}
