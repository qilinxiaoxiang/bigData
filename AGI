// Aggregates TP amounts for each combination based on TFD
private Map<String, BigDecimal> aggregateTpAmounts(List<Ticket> tickets) {
    return tickets.stream()
            .collect(Collectors.toMap(
                    ticket -> generateAggregationKey(ticket),
                    ticket -> BigDecimal.valueOf(ticket.getTpAmount()).setScale(2, BigDecimal.ROUND_HALF_UP),
                    BigDecimal::add));
}

// Generates the key used for aggregating TP amounts, adjusting for ticket type differences
private String generateAggregationKey(Ticket ticket) {
    // For 'MF' tickets, include 'combination', 'NRD', and 'TFD'; for 'PFON', only 'combination' and 'TFD'
    return "MF".equals(ticket.getTFD()) ?
            ticket.getCombination() + "#" + ticket.getNRD() + "#" + ticket.getTFD() :
            ticket.getCombination() + "#" + ticket.getTFD();
}

// Identifies invalid combinations
private Set<String> identifyInvalidCombinations(Map<String, BigDecimal> aggregatedTpAmounts) {
    // Extract just the combinations from the keys
    Set<String> combinations = new HashSet<>();
    aggregatedTpAmounts.keySet().forEach(key -> {
        String[] parts = key.split("#"); // Split by the '#' added in generateAggregationKey
        combinations.add(parts[0]); // Only take the combination part
    });

    // Determine invalid combinations
    return combinations.stream()
            .filter(combination -> 
                    aggregatedTpAmounts.keySet().stream().anyMatch(key -> key.startsWith(combination + "#MF")) &&
                    aggregatedTpAmounts.keySet().stream().anyMatch(key -> key.startsWith(combination + "#PFON")) &&
                    aggregatedTpAmounts.entrySet().stream().anyMatch(e -> e.getKey().startsWith(combination) && e.getValue().compareTo(BigDecimal.ZERO) != 0))
            .collect(Collectors.toSet());
}


import java.math.BigDecimal;
import java.util.*;
import java.util.stream.Collectors;

public class TicketValidator {

    public List<Ticket> validateTickets(List<Ticket> inputTickets, List<Ticket> databaseTickets, String ticketType) {
        List<Ticket> invalidTickets = new ArrayList<>();
        Set<String> invalidCombinations = new HashSet<>();
        Map<String, Ticket> ticketIdToTicketMap = new HashMap<>();

        if ("adjustment".equals(ticketType)) {
            // Combine database and input tickets for adjustment
            List<Ticket> combinedTickets = new ArrayList<>(databaseTickets);
            combinedTickets.addAll(inputTickets);

            // Create a map from ticket ID to ticket for database tickets
            for (Ticket ticket : databaseTickets) {
                ticketIdToTicketMap.put(ticket.getTicketId(), ticket);
            }

            // Aggregate TP amounts for combined tickets
            Map<String, BigDecimal> aggregatedTpAmounts = aggregateTpAmounts(combinedTickets);
            
            // Identify invalid combinations
            invalidCombinations = identifyInvalidCombinations(aggregatedTpAmounts);

            // Find invalid tickets based on invalid combinations and ticket IDs
            for (Ticket ticket : inputTickets) {
                if (invalidCombinations.contains(ticket.getCombination()) ||
                        (ticketIdToTicketMap.containsKey(ticket.getTicketId()) &&
                        invalidCombinations.contains(ticketIdToTicketMap.get(ticket.getTicketId()).getCombination()))) {
                    invalidTickets.add(ticket);
                }
            }
        } else if ("migration".equals(ticketType)) {
            // Aggregate TP amounts for input tickets only
            Map<String, BigDecimal> aggregatedTpAmounts = aggregateTpAmounts(inputTickets);
            
            // Identify invalid combinations
            invalidCombinations = identifyInvalidCombinations(aggregatedTpAmounts);

            // Mark input tickets as invalid based on invalid combinations
            for (Ticket ticket : inputTickets) {
                if (invalidCombinations.contains(ticket.getCombination())) {
                    invalidTickets.add(ticket);
                }
            }
        }

        return invalidTickets;
    }

    private Map<String, BigDecimal> aggregateTpAmounts(List<Ticket> tickets) {
        return tickets.stream()
                .collect(Collectors.toMap(
                        ticket -> ticket.getCombination() + "#" + ticket.getTFD(),
                        ticket -> BigDecimal.valueOf(ticket.getTpAmount()),
                        BigDecimal::add));
    }

    private Set<String> identifyInvalidCombinations(Map<String, BigDecimal> aggregatedAmounts) {
        Set<String> invalidCombinations = new HashSet<>();
        for (String key : aggregatedAmounts.keySet()) {
            String combination = key.split("#")[0];
            String tfd = key.split("#")[1];
            BigDecimal amount = aggregatedAmounts.get(key);
            if ((tfd.equals("MF") && aggregatedAmounts.containsKey(combination + "#PFON")) ||
                (tfd.equals("PFON") && aggregatedAmounts.containsKey(combination + "#MF"))) {
                if (amount.compareTo(BigDecimal.ZERO) != 0 ||
                    aggregatedAmounts.get(combination + (tfd.equals("MF") ? "#PFON" : "#MF")).compareTo(BigDecimal.ZERO) != 0) {
                    invalidCombinations.add(combination);
                }
            }
        }
        return invalidCombinations;
    }
}




import java.math.BigDecimal;
import java.util.*;
import java.util.stream.Collectors;

public class TicketValidator {

    public List<Ticket> validateTickets(List<Ticket> inputTickets, List<Ticket> databaseTickets, String ticketType) {
        List<Ticket> invalidTickets = new ArrayList<>();
        Set<String> invalidCombinations = new HashSet<>();
        Map<String, Set<String>> combinationToTicketIdsBeforeDeletion = new HashMap<>();

        if ("adjustment".equals(ticketType)) {
            // Map from combination to ticket IDs before any deletion
            for (Ticket ticket : databaseTickets) {
                combinationToTicketIdsBeforeDeletion
                    .computeIfAbsent(ticket.getCombination(), k -> new HashSet<>())
                    .add(ticket.getTicketId());
            }

            // Combine database and input tickets for adjustment
            List<Ticket> combinedTickets = new ArrayList<>(databaseTickets);
            combinedTickets.addAll(inputTickets);

            // Aggregate TP amounts for combined tickets
            Map<String, BigDecimal> aggregatedTpAmounts = aggregateTpAmounts(combinedTickets);
            
            // Identify invalid combinations
            invalidCombinations = identifyInvalidCombinations(aggregatedTpAmounts);

            // Find invalid tickets based on invalid combinations and pre-deletion ticket IDs
            for (Ticket ticket : inputTickets) {
                if (invalidCombinations.contains(ticket.getCombination()) ||
                    invalidCombinations.stream().anyMatch(comb -> 
                        combinationToTicketIdsBeforeDeletion.getOrDefault(comb, Collections.emptySet()).contains(ticket.getTicketId()))) {
                    invalidTickets.add(ticket);
                }
            }
        } else if ("migration".equals(ticketType)) {
            // Aggregate TP amounts for input tickets only
            Map<String, BigDecimal> aggregatedTpAmounts = aggregateTpAmounts(inputTickets);
            
            // Identify invalid combinations
            invalidCombinations = identifyInvalidCombinations(aggregatedTpAmounts);

            // Mark input tickets as invalid based on invalid combinations
            for (Ticket ticket : inputTickets) {
                if (invalidCombinations.contains(ticket.getCombination())) {
                    invalidTickets.add(ticket);
                }
            }
        }

        return invalidTickets;
    }

    private Map<String, BigDecimal> aggregateTpAmounts(List<Ticket> tickets) {
        return tickets.stream()
                .collect(Collectors.toMap(
                        ticket -> ticket.getCombination() + "#" + ticket.getTFD(),
                        ticket -> BigDecimal.valueOf(ticket.getTpAmount()),
                        BigDecimal::add));
    }

    private Set<String> identifyInvalidCombinations(Map<String, BigDecimal> aggregatedAmounts) {
        Set<String> invalidCombinations = new HashSet<>();
        for (String key : aggregatedAmounts.keySet()) {
            String combination = key.split("#")[0];
            String tfd = key.split("#")[1];
            BigDecimal amount = aggregatedAmounts.get(key);
            if ((tfd.equals("MF") && aggregatedAmounts.containsKey(combination + "#PFON")) ||
                (tfd.equals("PFON") && aggregatedAmounts.containsKey(combination + "#MF"))) {
                if (amount.compareTo(BigDecimal.ZERO) != 0 ||
                    aggregatedAmounts.get(combination + (tfd.equals("MF") ? "#PFON" : "#MF")).compareTo(BigDecimal.ZERO) != 0) {
                    invalidCombinations.add(combination);
                }
            }
        }
        return invalidCombinations;
    }
}

