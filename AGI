import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
public class DynamicQueryService {

    private final JdbcTemplate jdbcTemplate;

    @Autowired
    public DynamicQueryService(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Transactional(readOnly = true)
    public List<String> executeDynamicQuery(String tableName, String columnName, String date) {
        // Validate the table name and column name to prevent SQL injection
        if (!isSafeIdentifier(tableName) || !isSafeIdentifier(columnName)) {
            throw new IllegalArgumentException("Invalid table name or column name");
        }

        String sql = String.format("SELECT %s FROM %s WHERE eff_dt <= ? AND is_valid = 'A'", columnName, tableName);

        return jdbcTemplate.query(sql, new Object[]{date}, new RowMapper<String>() {
            @Override
            public String mapRow(ResultSet rs, int rowNum) throws SQLException {
                // Get the result as an object and convert it to a string
                Object resultObject = rs.getObject(1);
                return resultObject != null ? resultObject.toString() : null;
            }
        });
    }

    private boolean isSafeIdentifier(String identifier) {
        // Implement a method to check that the identifier is a valid table or column name
        // This is a simple example and should be replaced with a robust validation against a list of allowed identifiers
        return identifier.matches("[A-Za-z0-9_]+");
    }
}
